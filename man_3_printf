.TH _PRINTF 3 "March 2025" "1.0" "Custom _printf Manual"

.SH NAME
_printf \- Custom implementation of the printf function in C

.SH SYNOPSIS
.B #include "main.h"

.B int _printf(const char *format, ...);

.SH DESCRIPTION
The
.B _printf()
function produces output according to a format string, similar to the standard C
.B printf()
function. It writes the output to the standard output (stdout).

The format string is composed of zero or more characters and format specifiers. Format specifiers are introduced by a '%' character, followed by a conversion character.

This implementation supports the following format specifiers:

.TP
.B %c
Prints a single character.

.TP
.B %s
Prints a string of characters.

.TP
.B %d, %i
Prints a signed integer in decimal notation.

.TP
.B %%
Prints a literal '%' character.

.SH RETURN VALUE
Upon successful return, the function returns the total number of characters printed (excluding the null byte used to end output to strings).

If an error occurs (e.g., the format string is NULL or an incomplete format like a lone '%'), the function returns -1.

.SH EXAMPLES
.TP
.B _printf("Hello %s!", "world");
Outputs: "Hello world!"

.TP
.B _printf("Number: %d", 1024);
Outputs: "Number: 1024"

.TP
.B _printf("100%% complete");
Outputs: "100% complete"

.SH LIMITATIONS
This version does not support:

- Flags (e.g., '+', '-', '0')
- Field width and precision
- Length modifiers (e.g., 'l', 'h')
- Floating point formats (e.g., %f)
- Advanced specifiers (e.g., %u, %x, %o, %p)

.SH AUTHOR
Written by Jaylee Velez and Andres Mora
